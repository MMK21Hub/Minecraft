interface Dictionary<T> {
    [index: string]: T;
}

/**
 * The minimal featureset the hyperscript implementation should support
 */
declare interface HyperScriptFn<
    Element,
    Tag,
    Attribute = any,
    Children = Array<Element | string> | string
> {
    (tag: Tag, children?: Children): Element;
    (tag: Tag, attributes: Dictionary<Attribute>, children?: Children): Element;
}

/**
 * The actual hyperscript-helper function
 * The purpose of hyperscript-helpers is so you can use this function
 */
declare interface HyperScriptHelperFn<
    Element,
    Attribute = any,
    Children = Array<Element | string> | string
> {
    (selector: string, children?: Children): Element;
    (
        selector: string,
        attributes: Dictionary<Attribute>,
        children?: Children
    ): Element;
    (attributes: Dictionary<Attribute>, children?: Children): Element;
    (children?: Children): Element;
}

/**
 * Map of the actual helper functions generated by hh()
 */
declare type HyperScriptHelpers<Element, Attribute = any> = {
    [key in keyof HTMLElementTagNameMap | "svg"]: HyperScriptHelperFn<
        Element,
        Attribute
    >;
};

export default function hh<
    H extends HyperScriptFn<Element, Tag, Attribute>,
    Element = ReturnType<H>,
    Attribute = any,
    Tag = keyof HyperScriptHelpers<Element, Attribute>
>(h: H): HyperScriptHelpers<Element, Attribute>;
